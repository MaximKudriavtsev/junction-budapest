[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"tasks.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// imports/api/tasks.js                                                                          //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nmodule.export({\n  Tasks: () => Tasks\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nconst Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [{\n        private: {\n          $ne: true\n        }\n      }, {\n        owner: this.userId\n      }]\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String); // Make sure the user is logged in before inserting a task\n\n    if (!this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username\n    });\n  },\n\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n    const task = Tasks.findOne(taskId);\n\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n    const task = Tasks.findOne(taskId);\n\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: {\n        checked: setChecked\n      }\n    });\n  },\n\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n    const task = Tasks.findOne(taskId); // Make sure only the task owner can make a task private\n\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, {\n      $set: {\n        private: setToPrivate\n      }\n    });\n  }\n\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// server/main.js                                                                                //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nmodule.watch(require(\"../imports/api/tasks.js\"));\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/tasks.js","server/main.js"],"names":["module","export","Tasks","Meteor","watch","require","v","Mongo","check","Collection","isServer","publish","tasksPublication","find","$or","private","$ne","owner","userId","methods","text","String","Error","insert","createdAt","Date","username","users","findOne","taskId","task","remove","setChecked","Boolean","update","$set","checked","setToPrivate"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Tasks = new Mongo.Collection('tasks');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n\n    // Make sure the user is logged in before inserting a task\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== this.userId) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n  'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n\n    const task = Tasks.findOne(taskId);\n\n    // Make sure only the task owner can make a task private\n    if (task.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});\n","import '../imports/api/tasks.js';\n"]}}]